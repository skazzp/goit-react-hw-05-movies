{"version":3,"file":"static/js/779.a1142c9d.chunk.js","mappings":"6MAEaA,EAAOC,EAAAA,GAAAA,GAAH,mIAQJC,EAAOD,EAAAA,GAAAA,GAAH,6GAcJE,GARSF,EAAAA,GAAAA,IAAH,yGAQCA,EAAAA,GAAAA,EAAH,gFAMJG,EAAOH,EAAAA,GAAAA,IAAH,2H,SC0CjB,EA7DgB,WACd,OAA8BI,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAdAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,IAEXI,EAAAA,EAAAA,IAAWH,GACRI,MAAK,SAAAC,GAEJR,GAAW,kBAAMQ,EAASC,KAAKC,OAApB,GACZ,IACAC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,IACTG,QAAQb,GAAa,GAG3B,GAAE,CAACC,EAASF,KAGX,SAACR,EAAD,UACGM,GAAWA,EAAQiB,OAClBjB,EAAQkB,KAAI,SAAAC,GACV,IACEC,EAKED,EALFC,OAEAC,EAGEF,EAHFE,QACAC,EAEEH,EAFFG,WACAC,EACEJ,EADFI,GAGIC,EADO,IAAIC,KAAKH,GACDI,iBACrB,OACE,UAAC9B,EAAD,YACE,SAACE,EAAD,WAWE,4BACE,wBAAKsB,KACL,uBAAII,UAGR,SAAC3B,EAAD,UAAOwB,MAjBEE,EAoBd,KAED,kDAIP,C","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 25px;\n  margin: 0px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 25px;\n`;\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`;\nexport const Avatar = styled.img`\n  display: block;\n  margin: 0;\n  padding: 0;\n  width: 50px;\n  height: 50px;\n`;\n\nexport const Text = styled.p`\n  margin: 0;\n  font-size: 16px;\n  line-height: 1.3;\n`;\n\nexport const User = styled.div`\n  display: flex;\n  gap: 25px;\n  width: 100%;\n  align-items: center;\n  justify-content: start;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'services/MovieAPI';\nimport {\n  List,\n  Item,\n  // Avatar,\n  User,\n  Text,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n  useEffect(() => {\n    setIsLoading(true);\n    const getData = () => {\n      getReviews(movieId)\n        .then(response => {\n          // console.log(response);\n          setReviews(() => response.data.results);\n        })\n        .catch(err => console.log(err))\n        .finally(setIsLoading(false));\n    };\n    getData();\n  }, [movieId, isLoading]);\n\n  return (\n    <List>\n      {reviews && reviews.length ? (\n        reviews.map(review => {\n          const {\n            author,\n            // author_details,\n            content,\n            created_at,\n            id,\n          } = review;\n          const date = new Date(created_at);\n          const created = date.toLocaleString();\n          return (\n            <Item key={id}>\n              <User>\n                {/* <div>\n                  <Avatar\n                    src={\n                      'https://image.tmdb.org/t/p/w500' +\n                      author_details.avatar_path\n                    }\n                    // src={author_details.avatar_path.slice(1)}\n                    alt={author + ' avatar'}\n                  />\n                </div> */}\n                <div>\n                  <h3>{author}</h3>\n                  <p>{created}</p>\n                </div>\n              </User>\n              <Text>{content}</Text>\n            </Item>\n          );\n        })\n      ) : (\n        <h2>No reviews avaliable</h2>\n      )}\n    </List>\n  );\n};\n\nexport default Reviews;\n"],"names":["List","styled","Item","Text","User","useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","useEffect","getReviews","then","response","data","results","catch","err","console","log","finally","length","map","review","author","content","created_at","id","created","Date","toLocaleString"],"sourceRoot":""}